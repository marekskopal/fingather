<?php

declare(strict_types=1);

namespace FinGather\Dto;

use FinGather\Model\Entity\TickerFundamental;
use FinGather\Utils\DateTimeUtils;

final readonly class TickerFundamentalDto
{
	public function __construct(
		public int $id,
		public int $tickerId,
		public ?int $marketCapitalization,
		public ?int $enterpriseValue,
		public ?float $trailingPe,
		public ?float $forwardPe,
		public ?float $pegRatio,
		public ?float $priceToSalesTtm,
		public ?float $priceToBookMrq,
		public ?float $enterpriseToRevenue,
		public ?float $enterpriseToEbitda,
		public ?string $fiscalYearEnds,
		public ?string $mostRecentQuarter,
		public ?float $profitMargin,
		public ?float $operatingMargin,
		public ?float $returnOnAssetsTtm,
		public ?float $returnOnEquityTtm,
		public ?int $revenueTtm,
		public ?float $revenuePerShareTtm,
		public ?float $quarterlyRevenueGrowth,
		public ?int $grossProfitTtm,
		public ?int $ebitda,
		public ?int $netIncomeToCommonTtm,
		public ?float $dilutedEpsTtm,
		public ?float $quarterlyEarningsGrowthYoy,
		public ?int $totalCashMrq,
		public ?float $totalCashPerShareMrq,
		public ?int $totalDebtMrq,
		public ?float $totalDebtToEquityMrq,
		public ?float $currentRatioMrq,
		public ?float $bookValuePerShareMrq,
		public ?int $operatingCashFlowTtm,
		public ?int $leveredFreeCashFlowTtm,
		public ?int $sharesOutstanding,
		public ?int $floatShares,
		public ?int $avg10Volume,
		public ?int $avg90Volume,
		public ?int $sharesShort,
		public ?float $shortRatio,
		public ?float $shortPercentOfSharesOutstanding,
		public ?float $percentHeldByInsiders,
		public ?float $percentHeldByInstitutions,
		public ?float $fiftyTwoWeekLow,
		public ?float $fiftyTwoWeekHigh,
		public ?float $fiftyTwoWeekChange,
		public ?float $beta,
		public ?float $day50Ma,
		public ?float $day200Ma,
		public ?float $forwardAnnualDividendRate,
		public ?float $forwardAnnualDividendYield,
		public ?float $trailingAnnualDividendRate,
		public ?float $trailingAnnualDividendYield,
		public ?float $fiveYearAverageDividendYield,
		public ?float $payoutRatio,
		public ?string $dividendDate,
		public ?string $exDividendDate,
	) {
	}

	public static function fromEntity(TickerFundamental $tickerFundamental): self
	{
		return new self(
			id: $tickerFundamental->id,
			tickerId: $tickerFundamental->getTicker()->id,
			marketCapitalization: $tickerFundamental->getMarketCapitalization(),
			enterpriseValue: $tickerFundamental->getEnterpriseValue(),
			trailingPe: $tickerFundamental->getTrailingPe(),
			forwardPe: $tickerFundamental->getForwardPe(),
			pegRatio: $tickerFundamental->getPegRatio(),
			priceToSalesTtm: $tickerFundamental->getPriceToSalesTtm(),
			priceToBookMrq: $tickerFundamental->getPriceToBookMrq(),
			enterpriseToRevenue: $tickerFundamental->getEnterpriseToRevenue(),
			enterpriseToEbitda: $tickerFundamental->getEnterpriseToEbitda(),
			fiscalYearEnds: $tickerFundamental->getFiscalYearEnds() !== null ? DateTimeUtils::formatZulu(
				$tickerFundamental->getFiscalYearEnds(),
			) : null,
			mostRecentQuarter: $tickerFundamental->getMostRecentQuarter() !== null ? DateTimeUtils::formatZulu(
				$tickerFundamental->getMostRecentQuarter(),
			) : null,
			profitMargin: $tickerFundamental->getProfitMargin(),
			operatingMargin: $tickerFundamental->getOperatingMargin(),
			returnOnAssetsTtm: $tickerFundamental->getReturnOnAssetsTtm(),
			returnOnEquityTtm: $tickerFundamental->getReturnOnEquityTtm(),
			revenueTtm: $tickerFundamental->getRevenueTtm(),
			revenuePerShareTtm: $tickerFundamental->getRevenuePerShareTtm(),
			quarterlyRevenueGrowth: $tickerFundamental->getQuarterlyRevenueGrowth(),
			grossProfitTtm: $tickerFundamental->getGrossProfitTtm(),
			ebitda: $tickerFundamental->getEbitda(),
			netIncomeToCommonTtm: $tickerFundamental->getNetIncomeToCommonTtm(),
			dilutedEpsTtm: $tickerFundamental->getDilutedEpsTtm(),
			quarterlyEarningsGrowthYoy: $tickerFundamental->getQuarterlyEarningsGrowthYoy(),
			totalCashMrq: $tickerFundamental->getTotalCashMrq(),
			totalCashPerShareMrq: $tickerFundamental->getTotalCashPerShareMrq(),
			totalDebtMrq: $tickerFundamental->getTotalDebtMrq(),
			totalDebtToEquityMrq: $tickerFundamental->getTotalDebtToEquityMrq(),
			currentRatioMrq: $tickerFundamental->getCurrentRatioMrq(),
			bookValuePerShareMrq: $tickerFundamental->getBookValuePerShareMrq(),
			operatingCashFlowTtm: $tickerFundamental->getOperatingCashFlowTtm(),
			leveredFreeCashFlowTtm: $tickerFundamental->getLeveredFreeCashFlowTtm(),
			sharesOutstanding: $tickerFundamental->getSharesOutstanding(),
			floatShares: $tickerFundamental->getFloatShares(),
			avg10Volume: $tickerFundamental->getAvg10Volume(),
			avg90Volume: $tickerFundamental->getAvg90Volume(),
			sharesShort: $tickerFundamental->getSharesShort(),
			shortRatio: $tickerFundamental->getShortRatio(),
			shortPercentOfSharesOutstanding: $tickerFundamental->getShortPercentOfSharesOutstanding(),
			percentHeldByInsiders: $tickerFundamental->getPercentHeldByInsiders(),
			percentHeldByInstitutions: $tickerFundamental->getPercentHeldByInstitutions(),
			fiftyTwoWeekLow: $tickerFundamental->getFiftyTwoWeekLow(),
			fiftyTwoWeekHigh: $tickerFundamental->getFiftyTwoWeekHigh(),
			fiftyTwoWeekChange: $tickerFundamental->getFiftyTwoWeekChange(),
			beta: $tickerFundamental->getBeta(),
			day50Ma: $tickerFundamental->getDay50Ma(),
			day200Ma: $tickerFundamental->getDay200Ma(),
			forwardAnnualDividendRate: $tickerFundamental->getForwardAnnualDividendRate(),
			forwardAnnualDividendYield: $tickerFundamental->getForwardAnnualDividendYield(),
			trailingAnnualDividendRate: $tickerFundamental->getTrailingAnnualDividendRate(),
			trailingAnnualDividendYield: $tickerFundamental->getTrailingAnnualDividendYield(),
			fiveYearAverageDividendYield: $tickerFundamental->getFiveYearAverageDividendYield(),
			payoutRatio: $tickerFundamental->getPayoutRatio(),
			dividendDate: $tickerFundamental->getDividendDate() !== null ? DateTimeUtils::formatZulu(
				$tickerFundamental->getDividendDate(),
			) : null,
			exDividendDate:$tickerFundamental->getExDividendDate() !== null ? DateTimeUtils::formatZulu(
				$tickerFundamental->getExDividendDate(),
			) : null,
		);
	}
}
